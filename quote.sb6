# Quote Script for Stormbot TCL 6
#
# Usage:
# Add quote: BOT quote add <quote>
# Delete quote: BOT quote del <id>
# Random quote: BOT quote
# Stats: BOT quote stats
# Search: BOT quote search/find <text>
#
# Change Log:
# Please refer to http://github.com/demonicpagan/Stormbot-TCL-Quote-Module for changes made

SB:command add QUOTE 1 -none QE
sbd:set quote:author "Dustin Shea (demonicpagan@gmail.com)"

proc SB:proc_quote {nick host handle chan arg} {
	SB:setvariables

	# Create TDB Table
	tdb table setup QUOTE [list id nick host quote chan rating timestamp]
	tdb header set QUOTE cby $::botnick
	tdb header set QUOTE mby $::botnick

	# Help information
	if [string eq -nocase HELP $u1] {
		printh $nick "\[QUOTE\]:"
		printh $nick "Store, retrieve, and rank quotes stored through the bot."
		printh $nick ""
		printh $nick "Syntax: $::botnick QUOTE OFF | ON      (Activate the quote engine for channel)"
		printh $nick "Syntax: $::botnick QUOTE ADD <quote>   (Add a quote to the database, for multiline quotes use a single | with a space on each side.)"
		printh $nick "Syntax: $::botnick QUOTE DEL <id>      (Delete a quote from the database)"
		printh $nick "Syntax: $::botnick QUOTE STATS         (Displays the current number of quotes in the database)"
		printh $nick "Syntax: $::botnick QUOTE SEARCH <text> (Search for quotes in the database)"
		printh $nick "Syntax: $::botnick QUOTE               (Will display a random quote, if an ID given, will display that quote)"
		printh $nick "Syntax: $::botnick QUOTE LAST          (Displays the last quote submitted to the database)"
		return 0
	}


	switch -glob -- $l1 {
		off - on {
			if ![SB:checkaccess 500 $handle $chan] {printh $nick "\[QUOTE ${u0}\] You must be the channel owner to change this setting."; return 0}
			set true [istrue $1]
			tdb meta set QUOTE offon:$chan $true
			SB:quote_control save
			print $nick "\[QUOTE ${u0}\] Quote engine is now: [stu [offon $true]]"
			return 0
		}

		+ - add {
			set offon [tdb meta get QUOTE offon:$chan]
			if [isempty 2] {printh $nick "\[QUOTE ADD\] You're forgetting the quote!"; return 0}
			if ![nozero $offon] {printh $nick "\[QUOTE ADD\] Quote adding is currently turned off for $chan."; return 0}

			# Start storing quotes
			set record [tdb record create QUOTE]
			tdb header set QUOTE mby $handle
			tdb record set QUOTE $record id $record
			tdb record set QUOTE $record nick $nick
			tdb record set QUOTE $record host $nick!$host
			tdb record set QUOTE $record quote $2e ; # DO NOT JOIN!
			tdb record set QUOTE $record chan $chan
			tdb record set QUOTE $record rating ""
			tdb record set QUOTE $record timestamp [now]

			SB:quote_control save
			print $nick "\[QUOTE ADD\] Quote #[comma $record] has been added to the database!"
			return 0
		}

		"-" - del* {
			if ![SB:checkaccess 500 $handle $chan] {printh $nick "\[QUOTE ${u0}\] You must be the channel owner to change this setting."; return 0}
			set offon [tdb meta get QUOTE offon:$chan]
			if [isempty 2] {printh $nick "\[QUOTE DEL\] You're forgetting to put what quote(s) to delete!"; return 0}
			if ![nozero $offon] {printh $nick "\[QUOTE DEL\] Quote deleting is currently turned off for $chan."; return 0}

			# You can use SB:GET_COUNT to do a range of quotes,
			# including "LAST #"

			set list [SB:get_count $2e [tdb record last QUOTE]]
			set ll [llength $list]
			if [isempty list] {printh $nick "\[QUOTE DEL\] You didn't provide me with a quote number or range to delete."; return 0}

			# Destroy in high-to-low order, or the #'s will target the
			# wrong quotes !!!!!

			foreach quote [lsort -integer -decreasing $list] {
				set record [tdb record array QUOTE $2 data]
				if ![tdb record exists QUOTE $2] {printh $nick "\[QUOTE DEL\] No such quote exists in my database."; return 0}
				if ![string eq -nocase $data(chan) $chan] {printh $nick "\[QUOTE DEL\] You can read quotes from any channel, but can only DELETE quotes from which they were created in. Quote #[comma $data(id)] is from $data(chan)."; continue}
				tdb record destroy QUOTE $2
				tdb header set QUOTE mby $handle
				SB:quote_control save

				print $nick "\[QUOTE DEL\] Destroyed quote #[comma $data(id)]:"
				print $nick "Originally added by ${data(nick)}: [formatdate $data(timestamp) $handle]"

				# Allow both styles of line breaks: Dustin's & Domino's
				regsub -all -- { \| |\|\|} $data(quote) \000 quote
				foreach line [split $quote \000] {print $nick [space 5][join $quote]}
				if {$ll > 1} {print $nick ""; # Separator}
			}

			# Since we have a terminal line break, let's output something
			print $nick "\[QUOTE DEL\] [comma $ll] [plural quote $ll] deleted."
			return 0
		}

		find - search {
			return 0
		}

		stats - statistics {
			return 0
		}

		lst - last {
			return 0
		}

		default {
			return 0
		}

	}
}

proc SB:quote_control {cmd { target "" } { 1 "" } { 2 "" } { 3 "" } } {
	switch -exact -- [stl $cmd] {
		save {
			tdb save $::botnick-quotes.tdb QUOTES:*
			return 0
		}

		load {
			set exists [file exists $::botnick-quotes.tdb]
			if $exists { tdb load $::botnick-quotes.tdb }
			return $exists
		}

		default { error "\[SB:QUOTE_CONTROL\] Unknown Command: [stu $cmd]" }
	}
	error ?
}